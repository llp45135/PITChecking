/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rxtec.pitchecking.device.easen;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import com.rxtec.pitchecking.device.easen.Main.SDKMethod;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import static javax.swing.text.StyleConstants.Size;
import javax.swing.*;
import java.awt.*;
import java.util.Locale;

/**
 *
 * @author demid
 */
public class MainForm extends javax.swing.JFrame {

    private ImageIcon mFailedIcon = null;
    private ImageIcon mSuccessIcon = null;
        
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
                        
        try {
            BufferedImage successImg = ImageIO.read(new File("same.png"));                        
            mSuccessIcon = new ImageIcon(scaledImage(successImg, lblResult.getWidth(), lblResult.getHeight()));

            BufferedImage failedImg = ImageIO.read(new File("no_same.png"));            
            mFailedIcon = new ImageIcon(scaledImage(failedImg, lblResult.getWidth(), lblResult.getHeight()));

        } catch (Exception e) {            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnID = new javax.swing.JButton();
        btnScene = new javax.swing.JButton();
        lblScene = new ImageView();
        lblID = new ImageView();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        editMatchingTime = new javax.swing.JTextField();
        editScore = new javax.swing.JTextField();
        lblResult = new javax.swing.JLabel();
        lblFaceDetection = new ImageView();
        btnFaceDetection = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnID.setText("ID Photo");
        btnID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIDActionPerformed(evt);
            }
        });

        btnScene.setText("Scene Photo");
        btnScene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSceneActionPerformed(evt);
            }
        });

        lblScene.setBackground(new java.awt.Color(0, 255, 204));
        lblScene.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScene.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblScene.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblID.setBackground(new java.awt.Color(102, 102, 255));
        lblID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblID.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("Score:");

        jLabel2.setText("Matching Time:");

        editMatchingTime.setEditable(false);
        editMatchingTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMatchingTimeActionPerformed(evt);
            }
        });

        editScore.setEditable(false);

        lblFaceDetection.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnFaceDetection.setText("Face Detection");
        btnFaceDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFaceDetectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editScore, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(601, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnID)
                                .addGap(237, 237, 237)
                                .addComponent(btnScene)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnFaceDetection)
                                .addGap(51, 51, 51))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editMatchingTime, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblScene, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblFaceDetection, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 136, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFaceDetection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblScene, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnID)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnScene)
                        .addComponent(btnFaceDetection)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editMatchingTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIDActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(MainForm.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            editScore.setText("");
            editMatchingTime.setText("");    
            ((ImageView)lblID).setImage(null);
            ((ImageView)lblScene).setImage(null);
            lblResult.setIcon(null);
            
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.

            BufferedImage srcImg = null;
            try {
                srcImg = ImageIO.read(file);
                ((ImageView)lblID).setImage(srcImg);

                byte[] pixels = ((DataBufferByte) srcImg.getRaster().getDataBuffer()).getData();
                byte[] rgbPixels = ConvertToEngineBuffer(pixels, srcImg.getWidth(), srcImg.getHeight());

                int ret = SDKMethod.INSTANCE.setIDCardPhoto(rgbPixels, srcImg.getWidth(), srcImg.getHeight());
                if (ret == SDKMethod.SDK_NOT_FACE_DETECTED)
                {
                    JOptionPane.showMessageDialog(null, "Face Detection Failed!", "Warning", JOptionPane.PLAIN_MESSAGE);
                    return;
                }
                else if (ret == SDKMethod.SDK_NOT_ID_PHOTO)
                {
                    JOptionPane.showMessageDialog(null, "Not ID Photo!", "Warning", JOptionPane.PLAIN_MESSAGE);
                    return;
                }
            } catch (Exception e) {
              e.printStackTrace();
            }

        }
    }//GEN-LAST:event_btnIDActionPerformed

    private void btnSceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSceneActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(MainForm.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            editScore.setText("");
            editMatchingTime.setText("");    
            ((ImageView)lblScene).setImage(null);
            lblResult.setIcon(null);
            
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.

            try {
                BufferedImage srcImg = ImageIO.read(file);
                ((ImageView)lblScene).setImage(srcImg);

                byte[] pixels = ((DataBufferByte) srcImg.getRaster().getDataBuffer()).getData();
                byte[] rgbPixels = ConvertToEngineBuffer(pixels, srcImg.getWidth(), srcImg.getHeight());
                
                float[] matchingScore = new float[1];
                int[] yesNo = new int[1];
                float[] matchingTime = new float[1];
                int[] faceX = new int[1];
                int[] faceY = new int[1];
                int[] faceWidth = new int[1];
                int[] faceHeight = new int[1];
                int ret = SDKMethod.INSTANCE.match(rgbPixels, srcImg.getWidth(), srcImg.getHeight(), matchingScore, yesNo, matchingTime, faceX, faceY, faceWidth, faceHeight);
                if(ret == SDKMethod.SDK_NOT_FACE_DETECTED) {
                    JOptionPane.showMessageDialog(null, "Face Detection Failed!", "Warning", JOptionPane.PLAIN_MESSAGE);
                    return;
                } else if(ret == SDKMethod.SDK_NONE_IDCARD_SET) {
                    JOptionPane.showMessageDialog(null, "None ID Photo Set!", "Warning", JOptionPane.PLAIN_MESSAGE);
                    return;
                }
                
                if(yesNo[0] == 1)
                    lblResult.setIcon(mSuccessIcon);
                else
                    lblResult.setIcon(mFailedIcon);
                editScore.setText(String.format("%.02f", matchingScore[0]));
                editMatchingTime.setText(String.format("%.02f", matchingTime[0]));
                ((ImageView)lblScene).setFaceRect(new Rectangle(faceX[0], faceY[0], faceWidth[0], faceHeight[0]));
            } catch (Exception e) {
              e.printStackTrace();
            }
        }         
    }//GEN-LAST:event_btnSceneActionPerformed

    private void editMatchingTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMatchingTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editMatchingTimeActionPerformed

    private void btnFaceDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFaceDetectionActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(MainForm.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {           
            
            ((ImageView)lblFaceDetection).setImage(null);
            
            File file = fc.getSelectedFile();            
            //This is where a real application would open the file.

            BufferedImage srcImg = null;
            try {
                srcImg = ImageIO.read(file);
                ((ImageView)lblFaceDetection).setImage(srcImg);

                byte[] pixels = ((DataBufferByte) srcImg.getRaster().getDataBuffer()).getData();
                byte[] rgbPixels = ConvertToEngineBuffer(pixels, srcImg.getWidth(), srcImg.getHeight());
                
                int[] faceX = new int[1];
                int[] faceY = new int[1];
                int[] faceWidth = new int[1];
                int[] faceHeight = new int[1];
                int ret = SDKMethod.INSTANCE.detectFace(rgbPixels, srcImg.getWidth(), srcImg.getHeight(), faceX, faceY, faceWidth, faceHeight);
                if(ret == SDKMethod.SDK_NOT_FACE_DETECTED) {
                    JOptionPane.showMessageDialog(null, "Face Detection Failed!", "Warning", JOptionPane.PLAIN_MESSAGE);
                    return;
                }
                
                ((ImageView)lblFaceDetection).setFaceRect(new Rectangle(faceX[0], faceY[0], faceWidth[0], faceHeight[0]));

            } catch (Exception e) {
              e.printStackTrace();
            }

        } 
    }//GEN-LAST:event_btnFaceDetectionActionPerformed

    
    public static BufferedImage scaledImage(BufferedImage img, int newW, int newH) { 
        Image tmp = img.getScaledInstance(newW, newH, Image.SCALE_SMOOTH);
        BufferedImage dimg = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);

        Graphics2D g2d = dimg.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();

        return dimg;
    }  

    public static Rectangle GetFrameRect(Rectangle boundingRect, int imageWidth, int imageHeight)
    {
        double imageScale = imageWidth / (double)imageHeight;
        double boudingScale = boundingRect.width / (double)boundingRect.height;

        if (imageScale > boudingScale)
        {
            int top = boundingRect.y + (int)(boundingRect.height - boundingRect.width / imageScale) / 2;
            int left = boundingRect.x;

            int width = boundingRect.width;
            int height = (int)(boundingRect.width / imageScale);
            
            return new Rectangle(left, top, width, height);
        }
        else
        {
            int top = boundingRect.y;
            int left = boundingRect.x + (int)(boundingRect.width - boundingRect.height * imageScale) / 2;

            int width = (int)(boundingRect.height * imageScale);
            int height = boundingRect.height;

            return new Rectangle(left, top, width, height);
        }
    }
    
    public static byte[] ConvertToEngineBuffer(byte[] pixels, int width, int height)
    {
        byte[] dist = new byte[pixels.length];
        for(int y = 0; y < height; y ++)
        {
            for(int x = 0; x < width; x ++)
            {
                dist[(y * width + x) * 3 + 0] = pixels[(width * y + x) * 3 + 2];
                dist[(y * width + x) * 3 + 1] = pixels[(width * y + x) * 3 + 1];
                dist[(y * width + x) * 3 + 2] = pixels[(width * y + x) * 3 + 0];
            }
        }       
        
        return dist;
    }
    
    public class ImageView extends javax.swing.JLabel {        

        private BufferedImage mImg = null;
        private Rectangle mFaceRect = null;
        
        public ImageView() {
        }
        
        public void setImage(BufferedImage img) {
            mImg = img;   
            repaint();
        }
        
        public void setFaceRect(Rectangle rect) {
            mFaceRect = rect;
            repaint();
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            
            if(mImg != null) {
                Graphics2D g1 = (Graphics2D)g;
                Rectangle frameRect = GetFrameRect(new Rectangle(0, 0, getSize().width, getSize().height), mImg.getWidth(), mImg.getHeight());
                BufferedImage showImg = scaledImage(mImg, frameRect.width, frameRect.height);        
                g1.drawImage(showImg, null, frameRect.x, frameRect.y);                            
                
                if(mFaceRect != null) {
                    double wfactor = (double)frameRect.width / mImg.getWidth();
                    double hfactor = (double)frameRect.height / mImg.getHeight();

                    Rectangle faceRect = new Rectangle(frameRect.x + (int)(wfactor * mFaceRect.x),
                        frameRect.y + (int)(hfactor * mFaceRect.y),
                        (int)(wfactor * mFaceRect.width), (int)(hfactor * mFaceRect.height));
                    g1.setColor(Color.green);
                    g1.drawRect(faceRect.x, faceRect.y, faceRect.width, faceRect.height);
                }
            }
        }
    }
             
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFaceDetection;
    private javax.swing.JButton btnID;
    private javax.swing.JButton btnScene;
    private javax.swing.JTextField editMatchingTime;
    private javax.swing.JTextField editScore;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblFaceDetection;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblScene;
    // End of variables declaration//GEN-END:variables
}
